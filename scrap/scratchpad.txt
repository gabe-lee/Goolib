EXPECT: get_items_and_insert_at(.FROM_SLICE_ELSE_CREATE_NEW, List.LLSliceWithTotalNeeded{ .slice = slice_result, .total_needed = 4 }, .AFTER_INDEX, List.IndexInList.new(.USED, 10), alloc) shallow_equals LLSlice{ .count = 4, .first = 18, .last = 22, .list = .USED }
        EXPECT: LinkedList.define_manual_allocator_linked_list_type(.{ .list_options = .{ ... }, .forward_linkage = &.{ ... }[0..(...)], .backward_linkage = &.{ ... }[0..(...)], .element_list_access = .{ ... }, .element_idx_cache_field = &.{ ... }[0..(...)], .force_cache_last_index = true, .force_cache_first_index = true, .linked_set_enum = LinkedList.test.LinkedList.zig.TestState, .stronger_asserts = true }).LLSlice{ .list = LinkedList.test.LinkedList.zig.TestState.USED, .first = 15, .last = 22, .count = 4 } shallow_equals LinkedList.define_manual_allocator_linked_list_type(.{ .list_options = .{ ... }, .forward_linkage = &.{ ... }[0..(...)], .backward_linkage = &.{ ... }[0..(...)], .element_list_access = .{ ... }, .element_idx_cache_field = &.{ ... }[0..(...)], .force_cache_last_index = true, .force_cache_first_index = true, .linked_set_enum = LinkedList.test.LinkedList.zig.TestState, .stronger_asserts = true }).LLSlice{ .list = LinkedList.test.LinkedList.zig.TestState.USED, .first = 18, .last = 22, .count = 4 }
        ACTUAL: LinkedList.define_manual_allocator_linked_list_type(.{ .list_options = .{ ... }, .forward_linkage = &.{ ... }[0..(...)], .backward_linkage = &.{ ... }[0..(...)], .element_list_access = .{ ... }, .element_idx_cache_field = &.{ ... }[0..(...)], .force_cache_last_index = true, .force_cache_first_index = true, .linked_set_enum = LinkedList.test.LinkedList.zig.TestState, .stronger_asserts = true }).LLSlice{ .list = LinkedList.test.LinkedList.zig.TestState.USED, .first = 15, .last = 22, .count = 4 } !shallow_equals LinkedList.define_manual_allocator_linked_list_type(.{ .list_options = .{ ... }, .forward_linkage = &.{ ... }[0..(...)], .backward_linkage = &.{ ... }[0..(...)], .element_list_access = .{ ... }, .element_idx_cache_field = &.{ ... }[0..(...)], .force_cache_last_index = true, .force_cache_first_index = true, .linked_set_enum = LinkedList.test.LinkedList.zig.TestState, .stronger_asserts = true }).LLSlice{ .list = LinkedList.test.LinkedList.zig.TestState.USED, .first = 18, .last = 22, .count = 4 }